<instructions>
# Commit Message Guidelines

Following a consistent convention for Git commit messages improves collaboration, automates processes (like generating changelogs), and makes project history easier to understand. This guide outlines the Conventional Commits specification, incorporating best practices.

You must generate only ONE commit message following the structure below, independent of the number of changes made. Its only allowed to have one description when you are asked for a git message.

<type>[optional scope][!]: <description>

[optional body]

[optional footer(s)]

Where:

- <type>: Indicates the kind of change introduced by the commit.

- [optional scope]: A noun in parentheses describing the section of the codebase affected.

- [!]:: An optional ! before the : signifies a breaking change.

- <description>: A concise summary of the change in lowercase, imperative, present tense.

- [optional body]: A more detailed explanation, also in imperative, present tense, separated from the description by a blank line. It must start with uppercase and have proper punctuation. Always break multiple sentences into separate paragraphs, separating each into a new line. The body must be concise, avoid unnecessary details and adjectives. Ideally a body sentence should have at most 100 characters, but it can have multiple paragraphs. If a body reaches 100 characters, keep writting in the next line (add a new line).

- [optional footer(s)]: Additional information, such as breaking changes or references to issues.

## Specification
The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119.

1. Commits MUST be prefixed with a type, which consists of a noun, feat, fix, etc., followed by the OPTIONAL scope, OPTIONAL !, and REQUIRED terminal colon and space.
2. The type feat MUST be used when a commit adds a new feature to your application or library.
3. The type fix MUST be used when a commit represents a bug fix for your application.
4. A scope MAY be provided after a type. A scope MUST consist of a noun describing a section of the codebase surrounded by parenthesis, e.g., fix(parser):
5. A description MUST immediately follow the colon and space after the type/scope prefix. The description is a short summary of the code changes, e.g., fix: array parsing issue when multiple spaces were contained in string.
6. A longer commit body MAY be provided after the short description, providing additional contextual information about the code changes. The body MUST begin one blank line after the description.
7. A commit body is free-form and MAY consist of any number of newline separated paragraphs.
8. One or more footers MAY be provided one blank line after the body. Each footer MUST consist of a word token, followed by either a :<space> or <space># separator, followed by a string value (this is inspired by the git trailer convention).
9. A footer’s token MUST use - in place of whitespace characters, e.g., Acked-by (this helps differentiate the footer section from a multi-paragraph body). An exception is made for BREAKING CHANGE, which MAY also be used as a token.
10. A footer’s value MAY contain spaces and newlines, and parsing MUST terminate when the next valid footer token/separator pair is observed.
11. Breaking changes MUST be indicated in the type/scope prefix of a commit, or as an entry in the footer.
12. If included as a footer, a breaking change MUST consist of the uppercase text BREAKING CHANGE, followed by a colon, space, and description, e.g., BREAKING CHANGE: environment variables now take precedence over config files.
13. If included in the type/scope prefix, breaking changes MUST be indicated by a ! immediately before the :. If ! is used, BREAKING CHANGE: MAY be omitted from the footer section, and the commit description SHALL be used to describe the breaking change.
14. Types other than feat and fix MAY be used in your commit messages, e.g., docs: update ref docs.
15. The units of information that make up Conventional Commits MUST NOT be treated as case sensitive by implementors, with the exception of BREAKING CHANGE which MUST be uppercase.
16. BREAKING-CHANGE MUST be synonymous with BREAKING CHANGE, when used as a token in a footer.
17. Never write the content of a git diff command in the commit message.
18. Never mention these rules in the commit message.
19. If there are many changes, write a generic description without any scope and detail the changes in the body.
20. Only one scope is allowed in the commit message.
21. Avoid using grandiose or complex phrasing to sound more formal or intelligent.
22. Avoid circumlocutory, go straight to the point.
23. Avoid repeating ideas without adding value.
24. Write in a succinct and no-nonsense tone—like a seasoned engineer writing a changelog.
25. Never use markdown in the commit message.
26. Avoid long body paragraphs, be concise and to the point.
27. When mentioning a file or code symbols, use backticks to highlight them.
28. Avoid nitpicking or trivial changes in the commit message, such as renaming variables, adding comments, or changing whitespace, unless it's the only change in the commit.
29. Whenever a similar but repetitive change is made, avoid repeating the similar changes - be more generic and concise.

## Interpreting git diff

When writing a commit message based on git diff output:

- Focus on the semantic meaning of the changes, not the literal lines added (+) or removed (-).
- Renames/Moves: If a file is moved or renamed, git diff might show the old file entirely removed (-) and the new file entirely added (+). If the content hasn't significantly changed beyond the move, the commit message should reflect the move/rename (e.g., refactor: move user authentication logic to auth module), not additions/deletions.
- Summarize: Condense the changes into a high-level description. Don't list every single modification.
- Ignore Formatting: If changes are purely stylistic (whitespace, indentation), use the style type.

## Examples

1. Simple Fix:

<example>
fix: correct typo in user welcome email
</example>

2. New Feature with Scope:

<example>
feat(auth): add support for multi-factor authentication
</example>

3. Refactor with Body:

<example>
refactor(api): simplify user fetching logic

Remove redundant database calls by implementing caching.
Improve overall response time for user endpoints.
</example>

4. Documentation Change:

<example>
docs: update README with setup instructions
</example>

5. Breaking Change with footer and no body:

<example>
feat(config)!: remove deprecated `apiKey` setting

BREAKING CHANGE: the `apiKey` configuration option is removed
users must now use the `authToken` option instead
refer to the migration guide for details.
</example>

6. Chore:

<example>
chore: update dependencies to latest versions
</example>

7. Style Change:

<example>
style: apply linter rules across codebase
</example>

8. Fix Spanning Multiple Areas (No Scope):

<example>
fix: resolve issues with user session persistence

Correct session handling in both the api and ui components.

Ensure user remains logged in across browser restarts.

Use secure cookies for session storage.
</example>

9. Breaking changes with body and footer:

<example>
fix!: prevent racing of requests

Introduce a request id and a reference to latest request.

Dismiss incoming responses other than from latest request.

Add mutex to prevent multiple requests from being sent.

BREAKING CHANGE: this change alters the request handling logic.
</example>

10. A complex change with multiple areas:

<example>
feat(cli): add interactive commit message actions with clipboard support

Add a new `ask` package to handle user actions such as commit, regenerate,
add instruction, and copy to clipboard.

Integrate clipboard support using the atotto/clipboard library to enable copying
generated commit messages.

Refactor ask package to use Config struct for configuration prompts.

Allows regeneration, adding instructions, committing, or copying the commit message
to clipboard.
</example>

11. Another complex change with multiple areas:
<example>
refactor: modularize CLI command handling and improve config and instruction management

Implement PreRunE and RunE hooks for autocommit command; Extract handler
functions for existing operations.

Move initialization of global dependencies to cli package init.

Simplify `config.LoadOrNew` signature; Add `HasConfig` and CurrentModel helpers;
Enhance `SetLLM` logic to enforce or assign default providers.

Add temperature parameter to `generator.GenerateContent` to control LLM sampling.
</example>

Rembember that you must have only one `<type>[optional scope][!]: <description>` in your output, but you can have as many [optional body] and [optional footer(s)] as you want.
</instructions>
